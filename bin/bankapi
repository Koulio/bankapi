#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import json
import psycopg2
import psycopg2.extras
import re
import httplib
import pprint
import socket
import getopt
import subprocess

pg_connect_str = "dbname=bankapi"
pg_conn = None
pgp_keyserver = "keys.gnupg.net"

def bail(error=None):
    global pgp_keyserver

    if error is not None:
        print "Error: %s" % (error.rstrip())
    else:
        print "Usage: %s [-d dbname] <command> <args>" % (sys.argv[0])
        print ""
        print "Commands:"
        print " send frombank tobank messagetype filename [ messagetype filename ... ]"
        print " list"
        print " read messageid"
        print " add keyid"
        print ""
        print "Arguments:"
        print "    -d dbname     Name of database to use locally (default: bankapi)"
        print "    -k server     Use this keyserver instead of the default when adding a bank"
        print "                  (default: %s)" % (pgp_keyserver)

    sys.exit(1)

def process_commandline(command, argv):
    if command == 'send':
            # We need even pairs with messagetype/filename for sending
        if len(argv) < 4 or len(argv) % 2:
            bail()

        frombank = argv.pop(0)
        tobank = argv.pop(0)
        files = list()

        while argv:
            files.append({
                'messagetype': argv.pop(0),
                'filename': argv.pop(0)
                })

        for filedata in files:
            send_file(frombank, tobank, filedata['messagetype'], filedata['filename'])
    elif command == 'list':
        list_messages()
    elif command == 'read':
        if len(argv) != 1:
            bail()

        read_message(argv[0])
    elif command == 'add':
        if len(argv) != 1:
            bail()

        add_bank_key(argv[0])
    else:
        bail('Invalid command "%s"' % (command))

def send_file(from_bank, to_bank, messagetype, filename):
    global pg_conn

    fh = None
    if filename == '-':
        fh = sys.stdin
        filename = '<stdin>'
    else:
        try:
            fh = open(filename, 'r')
        except IOError as e:
            bail(error='Could not open file %s: %s' % (filename, e))

    messagetext = None
    try:
        messagetext = fh.read()
    except IOError as e:
        bail(error='Failed to read from file %s: %s' % (filename, e))

    if messagetext is None or len(messagetext) == 0:
        bail(error='No message text in file %s' % (filename))

    cur = pg_conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
    messagehub_host, messagehub_port, messagehub_proto, messagehub_path = None, None, None, None
    try:
        cur.execute("SELECT Protocol, Host, Port, Path FROM Banks WHERE BankID = %s", 
            [to_bank]);

        sqldata = cur.fetchone()
        messagehub_proto = sqldata['protocol']
        messagehub_host = sqldata['host']
        messagehub_port = sqldata['port']
        messagehub_path = sqldata['path']
        pg_conn.commit()
    except (psycopg2.InternalError, psycopg2.ProgrammingError) as e:
        pg_conn.rollback()
        bail(error=e.pgerror)

    client = None
    if messagehub_proto == 'https':
        client = httplib.HTTPSConnection(messagehub_host, messagehub_port)
    else:
        client = httplib.HTTPConnection(messagehub_host, messagehub_port)

    messagehub_str = url_str(messagehub_proto, messagehub_host, messagehub_port, messagehub_path)

    print "Sending message %s -> %s using %s ... " % (from_bank, to_bank, messagehub_str),
    cur = pg_conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
    messageid = None

    ciphertext = None
    try:
        cur.execute("""SELECT CipherText FROM Get_Message(Create_Message(
            _PlainText := %s,
            _MessageType := %s,
            _FromBankID := %s,
            _ToBankID := %s
            ))""",
            [messagetext, messagetype, from_bank, to_bank]);

        sqldata = cur.fetchone()
        ciphertext = sqldata['ciphertext']
        pg_conn.commit()
    except (psycopg2.InternalError, psycopg2.ProgrammingError) as e:
        pg_conn.rollback()
        bail(error=e.pgerror)

    response = None
    request = ciphertext
    headers = {
            "Content-Type": "text/plain"
            }

    try:
        client.request('POST', messagehub_path, request, headers)
        response = client.getresponse()
    except (socket.gaierror, socket.error) as e:
        bail(error="Could not connect to %s: %s" % (messagehub_str, str(e)))

    print " %s %s" % (response.status, response.reason)

    if response.status == 200:
        response_body = response.read()
        try:
            print " Saving delivery recieipt" 

            cur.execute("""SELECT FileID, FromBankID, ToBankID FROM Decode_Delivery_Receipt(
                _DeliveryReceipt := %s
                )""",
                [response_body])

            sqldata = cur.fetchone()
            print " Message delivered to %s (from %s) %s" % (sqldata['tobankid'], sqldata['frombankid'], sqldata['fileid'])
            pg_conn.commit()
        except (psycopg2.InternalError, psycopg2.ProgrammingError) as e:
            pg_conn.rollback()
            bail(error="Failed to save delivery receipt: error=%s, code=%s, diag=%s" % (e.pgerror, e.pgcode, e.diag))
    else:
        bail(error="Failure")

def list_messages():
    global pg_conn

    try:
        cur = pg_conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
        cur.execute("SELECT DateStamp, MessageID, MessageType, FromBankID, ToBankID FROM List_Messages()")

        print "{datestamp:19} {messageid:10} {messagetype:15.15}{frombankid:17.17}{tobankid:17.17}".format(datestamp='Date', messageid='ID', messagetype='Type', frombankid='From bank', tobankid='To bank')
        for sqldata in cur:
            print "{datestamp:%Y-%m-%d %H:%M:%S} {messageid:10} {messagetype:15.15}{frombankid:17.17}{tobankid:17.17}".format(**dict(sqldata))

        print " %s messages" % (cur.rowcount)

        pg_conn.commit()
    except (psycopg2.InternalError, psycopg2.ProgrammingError) as e:
        pg_conn.rollback()
        bail(error=e.pgerror)

def read_message(messageid):
    global pg_conn

    try:
        cur = pg_conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
        cur.execute("SELECT PlainText FROM Read_Message(%s)",
                [messageid])

        sqldata = cur.fetchone()

        print sqldata['plaintext'],

        pg_conn.commit()
    except (psycopg2.InternalError, psycopg2.ProgrammingError) as e:
        pg_conn.rollback()

        if e.pgcode == 'P0002':
            bail('No such message')
        elif e.pgcode == 'P0003':
            bail('Message ID amibgous')

        bail(error="Read failed with error %s, code %s" % (e.pgerror, e.pgcode))

def add_bank_key(bankid):
    global pgp_keyserver
    global pg_conn

    key_list = None
    try:
        key_list = subprocess.check_output(['/usr/bin/gpg', '--list-keys', bankid])
    except subprocess.CalledProcessError:
        pass

    import_key = True
    if key_list is not None:
        print "There is a local key for %s:" % (bankid)
        print ""
        print key_list
        print "Use this key (y/N)? ",
        if sys.stdin.readline().rstrip() == 'y':
            import_key = False

    if import_key:
        import_status = subprocess.call(['/usr/bin/gpg', '--keyserver', pgp_keyserver, '--search-keys',bankid])

    try:
        key_list = subprocess.check_output(['/usr/bin/gpg', '--with-colons', '--list-keys', bankid])
    except subprocess.CalledProcessError:
        bail(error="No key found for %s" % (bankid))

    key_lines = key_list.split('\n')

    if len(key_lines) == 4:
        subkeyid = None
        pubkeyid = None
        data = None


        for line in key_lines:
            fields = line.split(':')
            if fields[0] == 'pub':
                try:
                    pubkeyid = fields[4]
                    vfy_bankid = fields[9][:(fields[9].index(' '))]
                    data_str =  unescape_gpg_comment(fields[9][(fields[9].index('(') + 1):(fields[9].rindex(')'))])
                except ValueError as e:
                    bail(error="Failed to parse description in key (%s)" % (fields[9]))

                try:
                    data = json.loads(data_str)
                except ValueError as e:
                    bail(error="Invalid JSON description in key (%s): %s" % (data_str, str(e)))

            elif fields[0] == 'sub':
                subkeyid = fields[4]

        if subkeyid is None or pubkeyid is None:
            bail(error='Failed to extract public, sub key ids or description from key')

        try:
            pubkey = subprocess.check_output(['/usr/bin/gpg', '--armor', '--export', pubkeyid])
        except subprocess.CalledProcessErrror:
            bail(error="Could not export key %s for %s" % (pubkeyid, bankid))


        protocol, host, port, path = None, None, None, None
        try:
            protocol = data['protocol']
            host = data['host']
            port = data['port']
            path = data['path']
        except KeyError as e:
            bail(error="Key %s privides a valid JSON in the commonet, but does not provide values for protocol, host, port and path" % (pubkeyid))

        print "Registering pubkey %s, subkey %s for %s using %s" % (pubkeyid, subkeyid, bankid, url_str(protocol, host, port, path))

        try:
            cur = pg_conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
            cur.execute("""SELECT Register_Bank(
                    _BankID := %s,
                    _Protocol := %s,
                    _Host := %s,
                    _Port := %s,
                    _Path := %s)""",
                    [bankid, protocol, host, port, path])

            sqldata = cur.fetchone()

            pg_conn.commit()
        except (psycopg2.InternalError, psycopg2.ProgrammingError) as e:
            pg_conn.rollback()

            bail(error="Failed to register bank failed with error %s, code %s" % (e.pgerror, e.pgcode))
    else:
        bail(error='lines %i' % (len(key_lines)))


def url_str(protocol, host, port, path=None):
    expected_port = 80
    if protocol == 'https':
        expected_port = 443

    url = "%s://%s" % (protocol, host)

    if port != expected_port:
        url = url + ':%i' % (port)

    if path is not None:
        url = url + path

    return url

def unescape_gpg_comment(comment):
    if comment is None:
        return None

    n_comment = ''
    ndx = comment.find('\\x')
    while ndx > -1:

        hexstr = None
        if ndx > 0:
            n_comment = n_comment + comment[:ndx]
        hexstr = comment[(ndx+2):(ndx+4)]
        comment = comment[(ndx+4):]
        n_comment = n_comment + chr(int(hexstr, 16))

        ndx = comment.find('\\x')

    return n_comment + comment




if len(sys.argv) < 2:
    bail()

command = sys.argv.pop(1)

try:
    opts, args = getopt.getopt(sys.argv[1:], 'd:')
    for o, a in opts:
        if o == '-d':
            pg_connect_str = "dbname=%s" % (a)
        if o == '-k':
            pgp_keyserver = a
        else:
            bail()
except getopt.GetoptError as e:
    bail()

try:
    pg_conn = psycopg2.connect(pg_connect_str)
except psycopg2.OperationalError as e:
    bail(error='Failed to connect to database: %s' % (e))

process_commandline(command, args)

sys.exit(0)

