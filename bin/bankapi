#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import json
import psycopg2
import psycopg2.extras
import re
import httplib
import pprint
import socket
import getopt

pg_connect_str = "dbname=bankapi"
pg_conn = None

def bail(error=None):

    if error is not None:
        print "Error: %s" % (error.rstrip())
    else:
        print "Usage: %s [-d dbname] <command> <args>" % (sys.argv[0])
        print ""
        print "Commands:"
        print " send FROMBANK TOBANK messagetype filename [ messagetype filename ... ]"
        print " list"
        print ""
        print "Arguments:"
        print "    -d dbname     Name of database to use locally (default: bankapi)"

    sys.exit(1)

def process_commandline(command, argv):
    if command == 'send':
            # We need even pairs with messagetype/filename for sending
        if len(argv) < 4 or len(argv) % 2:
            bail()

        frombank = argv.pop(0)
        tobank = argv.pop(0)
        files = list()

        while argv:
            files.append({
                'messagetype': argv.pop(0),
                'filename': argv.pop(0)
                })

        for filedata in files:
            send_file(frombank, tobank, filedata['messagetype'], filedata['filename'])
    elif command == 'list':
        list_messages()
    else:
        bail('Invalid command "%s"' % (command))

def send_file(from_bank, to_bank, messagetype, filename):
    global pg_conn

    fh = None
    if filename == '-':
        fh = sys.stdin
        filename = '<stdin>'
    else:
        try:
            fh = open(filename, 'r')
        except IOError as e:
            bail(error='Could not open file %s: %s' % (filename, e))

    messagetext = None
    try:
        messagetext = fh.read()
    except IOError as e:
        bail(error='Failed to read from file %s: %s' % (filename, e))

    if messagetext is None or len(messagetext) == 0:
        bail(error='No message text in file %s' % (filename))

    cur = pg_conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
    messagehub_host, messagehub_port, messagehub_proto, messagehub_path = None, None, None, None
    try:
        cur.execute("SELECT Protocol, Host, Port, Path FROM Banks WHERE BankID = %s", 
            [to_bank]);

        sqldata = cur.fetchone()
        messagehub_proto = sqldata['protocol']
        messagehub_host = sqldata['host']
        messagehub_port = sqldata['port']
        messagehub_path = sqldata['path']
        pg_conn.commit()
    except (psycopg2.InternalError, psycopg2.ProgrammingError) as e:
        pg_conn.rollback()
        bail(error=e.pgerror)

    client = None
    messagehub_str = None
    messagehub_expected_port = 443
    if messagehub_proto == 'https':
        client = httplib.HTTPSConnection(messagehub_host, messagehub_port)
    else:
        client = httplib.HTTPConnection(messagehub_host, messagehub_port)
        messagehub_expected_port = 80

    if messagehub_port != messagehub_expected_port:
        messagehub_str = "%s://%s:%s%s" % (messagehub_proto, messagehub_host, messagehub_port, messagehub_path)
    else:
        messagehub_str = "%s://%s%s" % (messagehub_proto, messagehub_host, messagehub_path)

    print "Sending message %s -> %s using %s ... " % (from_bank, to_bank, messagehub_str),
    cur = pg_conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
    messageid = None

    ciphertext = None
    try:
        cur.execute("""SELECT CipherText FROM Get_Message(Create_Message(
            _PlainText := %s,
            _MessageType := %s,
            _FromBankID := %s,
            _ToBankID := %s
            ))""",
            [messagetext, messagetype, from_bank, to_bank]);

        sqldata = cur.fetchone()
        ciphertext = sqldata['ciphertext']
        pg_conn.commit()
    except (psycopg2.InternalError, psycopg2.ProgrammingError) as e:
        pg_conn.rollback()
        bail(error=e.pgerror)

    response = None
    request = ciphertext
    headers = {
            "Content-Type": "text/plain"
            }

    try:
        client.request('POST', messagehub_path, request, headers)
        response = client.getresponse()
    except (socket.gaierror, socket.error) as e:
        bail(error="Could not connect to %s: %s" % (messagehub_str, str(e)))

    print " %s %s" % (response.status, response.reason)

    if response.status == 200:
        response_body = response.read()
        try:
            print " Saving delivery recieipt" 

            cur.execute("""SELECT FileID, FromBankID, ToBankID FROM Decode_Delivery_Receipt(
                _DeliveryReceipt := %s
                )""",
                [response_body])

            sqldata = cur.fetchone()
            print " Message delivered to %s (from %s) %s" % (sqldata['tobankid'], sqldata['frombankid'], sqldata['fileid'])
            pg_conn.commit()
        except (psycopg2.InternalError, psycopg2.ProgrammingError) as e:
            pg_conn.rollback()
            bail(error="Failed to save delivery receipt: error=%s, code=%s, diag=%s" % (e.pgerror, e.pgcode, e.diag))
    else:
        bail(error="Failure")

def list_messages():
    global pg_conn

    try:
        cur = pg_conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
        cur.execute("SELECT DateStamp, MessageID, MessageType, FromBankID, ToBankID FROM List_Messages()")

        print "{datestamp:19} {messageid:10} {messagetype:15.15}{frombankid:17.17}{tobankid:17.17}".format(datestamp='Date', messageid='ID', messagetype='Type', frombankid='From bank', tobankid='To bank')
        for sqldata in cur:
            print "{datestamp:%Y-%m-%d %H:%M:%S} {messageid:10} {messagetype:15.15}{frombankid:17.17}{tobankid:17.17}".format(**dict(sqldata))

        print " %s messages" % (cur.rowcount)

        pg_conn.commit()
    except (psycopg2.InternalError, psycopg2.ProgrammingError) as e:
        pg_conn.rollback()
        bail(error=e.pgerror)

if len(sys.argv) < 2:
    bail()

command = sys.argv.pop(1)

try:
    opts, args = getopt.getopt(sys.argv[1:], 'd:')
    for o, a in opts:
        if o == '-d':
            pg_connect_str = "dbname=%s" % (a)
        else:
            bail()
except getopt.GetoptError as e:
    bail()

try:
    pg_conn = psycopg2.connect(pg_connect_str)
except psycopg2.OperationalError as e:
    bail(error='Failed to connect to database: %s' % (e))

process_commandline(command, args)

sys.exit(0)

